<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\VulnerabilityMap;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;
use DataTables;

class VulnerabilityMapController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        if ($request->ajax()) {
            $data = DB::table('vulnerable_areas')
                ->where('deleted_at', null);
            return DataTables::of($data)
                ->addIndexColumn()
                ->addColumn('action', function ($row) {

                    if ($row->is_approved == '0') {
                        return '<div class="d-flex justify-content-center align-items-center">
                    <div class="dropdown" style="text-align:center;">
                        <a href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-ellipsis-v text-primary fa-2x"></i>
                        </a>
                      
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
                          <a class="dropdown-item" data-id="' . $row->id . '" id="approveVulnerabilityBtn">Appprove</a>
                          <a class="dropdown-item" href=' . \URL::route('admin.vulnerabilitymap.edit', $row->id) . '>Edit</a>
                          <a class="dropdown-item" data-id="' . $row->id . '" id="deleteVulnerabilityMapBtn">Delete</a>
                        </div>
                      </div>

                      </div>
                      ';
                    } else {
                        return '<div class="d-flex justify-content-center align-items-center">
                        <div class="dropdown" style="text-align:center;">
                            <a href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-ellipsis-v text-primary fa-2x"></i>
                            </a>
                          
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuLink">
                              <a class="dropdown-item" href=' . \URL::route('admin.vulnerabilitymap.edit', $row->id) . '>Edit</a>
                              <a class="dropdown-item" data-id="' . $row->id . '" id="deleteVulnerabilityMapBtn">Delete</a>
                            </div>
                          </div>
    
                          </div>
                          ';
                    }
                })

                ->addColumn('is_approved', function ($row) {
                    if ($row->is_approved == '1') {
                        return '<label class="badge badge-success">Approved</label>';
                    } else {
                        return '<label class="badge badge-danger">Not yet Approved</label>';
                    }
                })

                ->addColumn('degree', function ($row) {
                    if ($row->degree == 'High') {
                        return '<label class="badge badge-danger">High Vulnerability</label>';
                    } else {
                        return '<label class="badge badge-warning">Medium Vulnerability</label>';
                    }
                })
                ->rawColumns(['action', 'is_approved', 'degree'])
                ->make(true);
        }
        //$coordinates = VulnerabilityMap::all()->where('deleted_at', NULL)->paginate(2);
        $barangays = DB::table('barangays')
            ->where('is_added', 1)
            ->get();
        $vulnerableareas = VulnerabilityMap::where('deleted_at', NULL)->paginate(3);
        $allvulnerableareas = VulnerabilityMap::all()->where('deleted_at', null);
        return view('features.viewvulnerabilitymap', [
            //"coordinates" => $coordinates,
            'vulnerableareas' => $vulnerableareas,
            'barangays' => $barangays,
            'allvulnerableareas' => $allvulnerableareas,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        $barangays = DB::table('barangays')
            ->where('is_added', 1)
            ->get();

        $coordinates = VulnerabilityMap::all()->where('deleted_at', NULL);
        return view('features.createvulnerabilitymap', [
            'coordinates' => $coordinates,
            'barangays' => $barangays,
        ]);
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        //VulnerabilityMap::create([
        //    'brgy_id' => NULL,
        //    'admin_id' => $request->admin_id,
        //    'issued_by' => $request->issuedBy,
        //    'type_of_disaster' => $request->typeDisaster,
        //    'brgy_loc' => $request->brgy_loc,
        //    'vulArea_lat' => $request->vulArea_lat,
        //    'vulArea_lng' => $request->vulArea_lng,
        //    'degree' => $request->degree,
        //
        //]);
        //
        //return redirect('/admin/vulnerabilitymap/create');
        $validator = Validator::make($request->all(), [
            'nearest_landmark' => 'required',
            'type' => 'required',
            'brgy_loc' => 'required',
            'nearest_landmark' => 'required',
            'brgy_loc' => 'required',
            'vulArea_lat' => 'required',
            'vulArea_lng' => 'required',
            'degree' => 'required',
        ], $messages = [
            'nearest_landmark.required' => 'The nearest landmark field is required!',
            'type.required' => 'The type of disaster field is required!',
            'brgy_loc.required' => 'The barangay field is required!',
            'nearest_landmark.required' => 'The nearest landmark field is required!',
            'brgy_loc.required' => 'The barangay field is required!',
            'vulArea_lat.required' => 'Locate the vulnerable area by clicking the map! ',
            'vulArea_lng.required' => 'Locate the vulnerable area by clicking the map! ',
            'degree.required' => 'The degree field is required!',
        ]);
        if ($validator->fails()) {
            return redirect('/admin/vulnerabilitymap/create')
                ->withErrors($validator)
                ->withInput();
        } else {
            $vulnerableArea = VulnerabilityMap::create([
                'brgy_id' => NULL,
                'admin_id' => 1,
                'issued_by' => Auth::user()->name,
                'nearest_landmark' => $request->input('nearest_landmark'),
                'type_of_disaster' => $request->input('type'),
                'brgy_loc' => $request->input('brgy_loc'),
                'vulArea_lat' => $request->input('vulArea_lat'),
                'vulArea_lng' => $request->input('vulArea_lng'),
                'degree' => $request->input('degree'),
                'is_approved' => 1,

            ]);

            return redirect('/admin/vulnerabilitymap')->with('success', 'The vulnerable area has been added!');
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $barangays = DB::table('barangays')
            ->where('is_added', 1)
            ->get();

        $vulnerablearea = VulnerabilityMap::find($id);
        //$coordinates = VulnerabilityMap::all()->where('deleted_at', NULL);
        $coordinates = DB::table('vulnerable_areas')
            ->where('deleted_at', NULL)
            ->where('id', '!=', $id)
            ->get();
        return view('features.editvulnerabilitymap', [
            'vulnerablearea' => $vulnerablearea,
            'barangays' => $barangays,
            'coordinates' => $coordinates,
        ]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $validator = Validator::make($request->all(), [
            'nearest_landmark' => 'required',
            'type' => 'required',
            'brgy_loc' => 'required',
            'nearest_landmark' => 'required',
            'brgy_loc' => 'required',
            'vulArea_lat' => 'required',
            'vulArea_lng' => 'required',
            'degree' => 'required',
        ], $messages = [
            'nearest_landmark.required' => 'The nearest landmark field is required!',
            'type.required' => 'The type of disaster field is required!',
            'brgy_loc.required' => 'The barangay field is required!',
            'nearest_landmark.required' => 'The nearest landmark field is required!',
            'brgy_loc.required' => 'The barangay field is required!',
            'vulArea_lat.required' => 'Locate the vulnerable area by clicking the map! ',
            'vulArea_lng.required' => 'Locate the vulnerable area by clicking the map! ',
            'degree.required' => 'The degree field is required!',
        ]);
        if ($validator->fails()) {
            return redirect('/admin/vulnerabilitymap/' . $id . '/edit')
                ->withErrors($validator)
                ->withInput();
        } else {
            $vulnerableArea = VulnerabilityMap::where('id', $id)->update([
                'brgy_id' => NULL,
                'admin_id' => 1,
                'issued_by' => Auth::user()->name,
                'nearest_landmark' => $request->input('nearest_landmark'),
                'type_of_disaster' => $request->input('type'),
                'brgy_loc' => $request->input('brgy_loc'),
                'vulArea_lat' => $request->input('vulArea_lat'),
                'vulArea_lng' => $request->input('vulArea_lng'),
                'degree' => $request->input('degree'),

            ]);

            return redirect('/admin/vulnerabilitymap')->with('success', 'The vulnerable area has been edited!');
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //$vul = VulnerabilityMap::find($id);
        //$vul->delete();
        //return redirect('/admin/vulnerabilitymap/create');

        VulnerabilityMap::find($id)->delete();
        return response()->json(['message' => 'The vulnerable area has been deleted!']);
    }

    public function approve($id)
    {
        VulnerabilityMap::find($id)->update(['is_approved' => 1, 'updated_at' => now()]);
        return response()->json(['message' => 'The vulnerable area has been approved!']);

        //$pendingEvacuationCenter = DB::table('evacuation_centers')
        //    ->where('id', $id)
        //    ->update(['is_approved' => 1, 'updated_at' => now()]);
        //return redirect('/admin/evacuation')->with('success', 'The evacuation center has been approved!');
    }
}
